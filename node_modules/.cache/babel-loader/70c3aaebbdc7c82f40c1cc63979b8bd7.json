{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Humidity from \"./Components/Humidity\";\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = event => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n\n  const handleCountryChange = event => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n\n  let tempForcastNext4Days = [];\n\n  const getWeather = e => {\n    e.preventDefault(); // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country).then(response => response.json()).then(result => {\n        console.log(result);\n        setWeatherForcast({\n          date_time: result.list[0].dt_txt,\n          temperature: Math.floor(result.list[0].main.temp - kelvin),\n          temp_min: Math.floor(result.list[0].main.temp_min - kelvin),\n          temp_max: Math.floor(result.list[0].main.temp_max - kelvin),\n          feels_like: Math.floor(result.list[0].main.feels_like - kelvin),\n          humidity: result.list[0].main.humidity,\n          description: result.list[0].weather[0].description,\n          error: \"\"\n        });\n      });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.weather_info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    handleCityChange: handleCityChange,\n    handleCountryChange: handleCountryChange,\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: weatherForcast.temperature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 35\n      }\n    }, \"Max-temp  :\", weatherForcast.temp_max),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 35\n      }\n    }, \"Max-temp  :\", weatherForcast.temp_min),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 35\n      }\n    }, \"feels like \", weatherForcast.feels_like),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, tempForcastNext4Days.map((temp, index) => /*#__PURE__*/React.createElement(Temperature, {\n    temperature: /*#__PURE__*/React.createElement(\"p\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 37\n      }\n    }, \"Next-Day:\", index + 1, \" :\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 72\n      }\n    }, temp)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Humidity, {\n    humidity: weatherForcast.humidity,\n    desc: weatherForcast.description,\n    error: weatherForcast.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","styles","Title","LocationForm","Humidity","Temperature","getOpenWeatherMapForecast","App","weatherForcast","setWeatherForcast","date_time","temperature","temp_min","temp_max","feels_like","humidity","description","error","city","setCity","country","setCountry","handleCityChange","event","target","value","handleCountryChange","tempForcastNext4Days","getWeather","e","preventDefault","kelvin","then","response","json","result","console","log","list","dt_txt","Math","floor","main","temp","weather","app","title","weather_info","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Humidity from \"./Components/Humidity\";\n\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\n\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = (event) => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n  const handleCountryChange = (event) => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n  let tempForcastNext4Days =[];\n  const getWeather = (e) => {\n    e.preventDefault();\n\n    // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n     \n    if (city && country) {\n      getOpenWeatherMapForecast(city, country)\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(result);\n          setWeatherForcast({\n            date_time: result.list[0].dt_txt,\n            temperature: Math.floor(result.list[0].main.temp - kelvin),\n            temp_min: Math.floor(result.list[0].main.temp_min - kelvin),\n            temp_max: Math.floor(result.list[0].main.temp_max - kelvin),\n            feels_like: Math.floor(result.list[0].main.feels_like - kelvin),\n            humidity: result.list[0].main.humidity,\n            description: result.list[0].weather[0].description,\n            error: \"\",\n          });\n          \n          \n        });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\",\n      });\n    }\n    \n  };\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.title}>\n        <Title />\n      </div>\n      <div className={styles.weather_info}>\n        <LocationForm\n          handleCityChange={handleCityChange}\n          handleCountryChange={handleCountryChange}\n          getWeather={getWeather}\n        />\n        <Temperature temperature={weatherForcast.temperature} />\n        <Temperature temperature={<p>Max-temp  :{weatherForcast.temp_max}</p>} />\n        <Temperature temperature={<p>Max-temp  :{weatherForcast.temp_min}</p>} />\n        <Temperature temperature={<p>feels like {weatherForcast.feels_like}</p>} />\n        <div>\n        {tempForcastNext4Days.map((temp,index) => (\n          <Temperature temperature={<p key={index}>Next-Day:{index+1} :<span>{temp}</span></p>} />\n        ))}\n        </div>\n\n\n        <Humidity humidity={weatherForcast.humidity} desc={weatherForcast.description} error={weatherForcast.error} />\n\n        {/* <p>{weatherForcast.description}</p> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}