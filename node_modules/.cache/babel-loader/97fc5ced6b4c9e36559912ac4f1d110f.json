{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n\n  const getWeather = e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city).then(response => response.json).then(result => {\n        setWeatherForcast({\n          temperature: result.list[0].main.temp - kelvin,\n          temp_min: \"\",\n          temp_max: \"\",\n          feels_like: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"\"\n        });\n      });\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }, \"`$\", city, \",$\", country, \"`\");\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Dates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","LocationForm","Dates","getOpenWeatherMapForecast","App","weatherForcast","setWeatherForcast","temperature","temp_min","temp_max","feels_like","humidity","description","error","getWeather","e","preventDefault","city","target","elements","value","country","kelvin","then","response","json","result","list","main","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,yBAAT,QAA0C,2BAA1C;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC;AAEnDO,IAAAA,WAAW,EAAE,EAFsC;AAGnDC,IAAAA,QAAQ,EAAE,EAHyC;AAInDC,IAAAA,QAAQ,EAAE,EAJyC;AAKnDC,IAAAA,UAAU,EAAE,EALuC;AAMnDC,IAAAA,QAAQ,EAAE,EANyC;AAOnDC,IAAAA,WAAW,EAAE,EAPsC;AAQnDC,IAAAA,KAAK,EAAE;AAR4C,GAAD,CAApD;;AAUA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC;AACA,UAAMC,OAAO,GAAGN,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBE,OAAlB,CAA0BD,KAA1C;AACA,UAAME,MAAM,GAAG,GAAf;;AAEA,QAAIL,IAAI,IAAII,OAAZ,EAAqB;AACnBlB,MAAAA,yBAAyB,CAACc,IAAD,CAAzB,CACGM,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAD/B,EAEGF,IAFH,CAESG,MAAD,IAAY;AAChBpB,QAAAA,iBAAiB,CAAC;AAEhBC,UAAAA,WAAW,EAAEmB,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,IAAf,CAAoBC,IAApB,GAA2BP,MAFxB;AAGhBd,UAAAA,QAAQ,EAAE,EAHM;AAIhBC,UAAAA,QAAQ,EAAE,EAJM;AAKhBC,UAAAA,UAAU,EAAE,EALI;AAMhBC,UAAAA,QAAQ,EAAE,EANM;AAOhBC,UAAAA,WAAW,EAAE,EAPG;AAQhBC,UAAAA,KAAK,EAAE;AARS,SAAD,CAAjB;AAYD,OAfH;AAgBE,0BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAOI,IAAP,QAAeI,OAAf,MAFF;AAMH,KAvBD,MAwBI;AACFf,MAAAA,iBAAiB,CAAC;AAACC,QAAAA,WAAW,EAAE,EAAd;AAClBC,QAAAA,QAAQ,EAAE,EADQ;AAElBC,QAAAA,QAAQ,EAAE,EAFQ;AAGlBC,QAAAA,UAAU,EAAE,EAHM;AAIlBC,QAAAA,QAAQ,EAAE,EAJQ;AAKlBC,QAAAA,WAAW,EAAE,EALK;AAMlBC,QAAAA,KAAK,EAAE;AANW,OAAD,CAAjB;AAOD;AACF,GAvCD;;AAyCA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,UAAU,EAAEC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAQD;;AAED,eAAeV,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n \n  const [weatherForcast, setWeatherForcast] = useState({\n   \n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const getWeather = (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city)\n        .then((response) => response.json)\n        .then((result) => {\n          setWeatherForcast({\n            \n            temperature: result.list[0].main.temp - kelvin,\n            temp_min: \"\",\n            temp_max: \"\",\n            feels_like: \"\",\n            humidity: \"\",\n            description: \"\",\n            error: \"\",\n          });\n          \n         \n        });\n        return(\n          \n          <h1>`${city},${country}`</h1>\n          \n         \n        )\n    }\n    else{\n      setWeatherForcast({temperature: \"\",\n      temp_min: \"\",\n      temp_max: \"\",\n      feels_like: \"\",\n      humidity: \"\",\n      description: \"\",\n      error: \"Please enter city and country\",})\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <LocationForm getWeather={getWeather}/>\n      <Dates />\n     \n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}