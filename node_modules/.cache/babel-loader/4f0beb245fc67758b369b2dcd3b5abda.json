{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = event => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n\n  const handleCountryChange = event => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n\n  const getWeather = e => {\n    e.preventDefault(); // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country).then(response => response.json()).then(result => {\n        console.log(result);\n        setWeatherForcast({\n          temperature: result.list[0].main.temp - kelvin,\n          temp_min: result.list[0].main,\n          temp_max: \"\",\n          feels_like: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"\"\n        });\n      });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.weather_info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    handleCityChange: handleCityChange,\n    handleCountryChange: handleCountryChange,\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: weatherForcast.temperature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","styles","Title","LocationForm","Temperature","getOpenWeatherMapForecast","App","weatherForcast","setWeatherForcast","temperature","temp_min","temp_max","feels_like","humidity","description","error","city","setCity","country","setCountry","handleCityChange","event","target","value","handleCountryChange","getWeather","e","preventDefault","kelvin","then","response","json","result","console","log","list","main","temp","app","title","weather_info"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\"\nimport LocationForm from \"./Components/LocationForm\";\n\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = (event) => {\n    // console.log(event.target.value);\n    setCity(event.target.value)\n  };\n  const handleCountryChange = (event) => {\n    // console.log(event.target.value);\n    setCountry(event.target.value)\n  };\n\n  const getWeather = (e) => {\n    e.preventDefault();\n    \n    // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n    \n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city,country)\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(result);\n          setWeatherForcast({\n            temperature: result.list[0].main.temp - kelvin ,\n            temp_min: result.list[0].main,\n            temp_max: \"\",\n            feels_like: \"\",\n            humidity: \"\",\n            description: \"\",\n            error: \"\",\n          });\n     \n        });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.app}>\n      <div className ={styles.title}>\n    <Title />\n      </div>\n      <div className={styles.weather_info}>\n      <LocationForm\n        handleCityChange={handleCityChange}\n        handleCountryChange={handleCountryChange}\n        getWeather={getWeather}\n      />\n      \n      <Temperature temperature={weatherForcast.temperature}  />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}