{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n\n  const getWeather = e => {\n    e.preventDefault(); // console.log(city);\n\n    console.log(e);\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city).then(response => response.json).then(result => {\n        setWeatherForcast({\n          temperature: result.list[0].main.temp - kelvin,\n          temp_min: \"\",\n          temp_max: \"\",\n          feels_like: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"\"\n        });\n      });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Dates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: weatherForcast.temperature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","LocationForm","Dates","Temperature","getOpenWeatherMapForecast","App","weatherForcast","setWeatherForcast","temperature","temp_min","temp_max","feels_like","humidity","description","error","getWeather","e","preventDefault","console","log","city","target","elements","value","country","kelvin","then","response","json","result","list","main","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,yBAAT,QAA0C,2BAA1C;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC;AACnDQ,IAAAA,WAAW,EAAE,EADsC;AAEnDC,IAAAA,QAAQ,EAAE,EAFyC;AAGnDC,IAAAA,QAAQ,EAAE,EAHyC;AAInDC,IAAAA,UAAU,EAAE,EAJuC;AAKnDC,IAAAA,QAAQ,EAAE,EALyC;AAMnDC,IAAAA,WAAW,EAAE,EANsC;AAOnDC,IAAAA,KAAK,EAAE;AAP4C,GAAD,CAApD;;AASA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF,GADwB,CAExB;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACA,UAAMI,IAAI,GAAGJ,CAAC,CAACK,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC;AACA,UAAMC,OAAO,GAAGR,CAAC,CAACK,MAAF,CAASC,QAAT,CAAkBE,OAAlB,CAA0BD,KAA1C;AAEA,UAAME,MAAM,GAAG,GAAf;;AAEA,QAAIL,IAAI,IAAII,OAAZ,EAAqB;AACnBpB,MAAAA,yBAAyB,CAACgB,IAAD,CAAzB,CACGM,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAD/B,EAEGF,IAFH,CAESG,MAAD,IAAY;AAChBtB,QAAAA,iBAAiB,CAAC;AAChBC,UAAAA,WAAW,EAAEqB,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,IAAf,CAAoBC,IAApB,GAA2BP,MADxB;AAEhBhB,UAAAA,QAAQ,EAAE,EAFM;AAGhBC,UAAAA,QAAQ,EAAE,EAHM;AAIhBC,UAAAA,UAAU,EAAE,EAJI;AAKhBC,UAAAA,QAAQ,EAAE,EALM;AAMhBC,UAAAA,WAAW,EAAE,EANG;AAOhBC,UAAAA,KAAK,EAAE;AAPS,SAAD,CAAjB;AASD,OAZH;AAcD,KAfD,MAeO;AACLP,MAAAA,iBAAiB,CAAC;AAChBC,QAAAA,WAAW,EAAE,EADG;AAEhBC,QAAAA,QAAQ,EAAE,EAFM;AAGhBC,QAAAA,QAAQ,EAAE,EAHM;AAIhBC,QAAAA,UAAU,EAAE,EAJI;AAKhBC,QAAAA,QAAQ,EAAE,EALM;AAMhBC,QAAAA,WAAW,EAAE,EANG;AAOhBC,QAAAA,KAAK,EAAE;AAPS,OAAD,CAAjB;AASD;AACF,GAnCD;;AAuCA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,UAAU,EAAEC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAET,cAAc,CAACE,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const getWeather = (e) => {\n    e.preventDefault();\n    // console.log(city);\n    console.log(e);\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city)\n        .then((response) => response.json)\n        .then((result) => {\n          setWeatherForcast({\n            temperature: result.list[0].main.temp - kelvin,\n            temp_min: \"\",\n            temp_max: \"\",\n            feels_like: \"\",\n            humidity: \"\",\n            description: \"\",\n            error: \"\",\n          });\n        });\n     \n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\",\n      });\n    }\n  };\n\n\n  \n  return (\n    <div className=\"App\">\n      <LocationForm getWeather={getWeather} />\n      <Dates />\n      <Temperature temperature={weatherForcast.temperature} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}