{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Location from \"./Components/Location\";\nimport Humidity from \"./Components/Humidity\";\nimport Temperature from \"./Components/Temperature\";\nimport Date_Time from \"./Components/Date_Time\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    city: \"\",\n    country: \"\",\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = event => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n\n  const handleCountryChange = event => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n\n  const [tempForcastNext4Days, setTemp4Days] = useState([]);\n\n  const getWeather = e => {\n    e.preventDefault(); // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country).then(response => response.json()).then(result => {\n        console.log(result);\n        setWeatherForcast({\n          city: result.city.name,\n          country: result.city.country,\n          date_time: result.list[0].dt_txt,\n          temperature: Math.floor(result.list[0].main.temp - kelvin),\n          temp_min: Math.floor(result.list[0].main.temp_min - kelvin),\n          temp_max: Math.floor(result.list[0].main.temp_max - kelvin),\n          feels_like: Math.floor(result.list[0].main.feels_like - kelvin),\n          humidity: result.list[0].main.humidity,\n          description: result.list[0].weather[0].description,\n          error: \"\"\n        });\n        setTemp4Days([result.list[1].main.temp, result.list[2].main.temp, result.list[3].main.temp, result.list[4].main.temp]);\n      });\n    } else {\n      setWeatherForcast({\n        city: \"\",\n        country: \"\",\n        date_time: \"\",\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: weatherForcast.temperature > 18 ? styles.warm : styles.cold,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    className: true,\n    handleCityChange: handleCityChange,\n    handleCountryChange: handleCountryChange,\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Location, {\n    className: styles.location,\n    city: weatherForcast.city,\n    country: weatherForcast.country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Date_Time, {\n    date_time: weatherForcast.date_time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: weatherForcast.temperature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temp_desc: \"Max-temp\",\n    temperature: weatherForcast.temp_max,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temp_desc: \"Min-temp\",\n    temperature: weatherForcast.temp_min,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temp_desc: \"feels like\",\n    temperature: weatherForcast.feels_like,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, tempForcastNext4Days.map((temp, index) => /*#__PURE__*/React.createElement(Temperature, {\n    temp_desc: /*#__PURE__*/React.createElement(\"p\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 26\n      }\n    }, \"Next-Day:\", index + 1, \" :\"),\n    temperature: Math.floor(temp),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Humidity, {\n    humidity: weatherForcast.humidity,\n    desc: weatherForcast.description,\n    error: weatherForcast.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","styles","Title","LocationForm","Location","Humidity","Temperature","Date_Time","getOpenWeatherMapForecast","App","weatherForcast","setWeatherForcast","city","country","date_time","temperature","temp_min","temp_max","feels_like","humidity","description","error","setCity","setCountry","handleCityChange","event","target","value","handleCountryChange","tempForcastNext4Days","setTemp4Days","getWeather","e","preventDefault","kelvin","then","response","json","result","console","log","name","list","dt_txt","Math","floor","main","temp","weather","app","title","warm","cold","location","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Location from \"./Components/Location\";\nimport Humidity from \"./Components/Humidity\";\n\nimport Temperature from \"./Components/Temperature\";\nimport Date_Time from \"./Components/Date_Time\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    city :\"\",\n    country:\"\",\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = (event) => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n  const handleCountryChange = (event) => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n  const [tempForcastNext4Days, setTemp4Days] = useState([]);\n  const getWeather = (e) => {\n    e.preventDefault();\n\n    // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country)\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(result);\n          setWeatherForcast({\n            city : result.city.name,\n            country:result.city.country,\n            date_time: result.list[0].dt_txt,\n            temperature: Math.floor(result.list[0].main.temp - kelvin),\n            temp_min: Math.floor(result.list[0].main.temp_min - kelvin),\n            temp_max: Math.floor(result.list[0].main.temp_max - kelvin),\n            feels_like: Math.floor(result.list[0].main.feels_like - kelvin),\n            humidity: result.list[0].main.humidity,\n            description: result.list[0].weather[0].description,\n            error: \"\",\n          });\n          setTemp4Days([\n            result.list[1].main.temp,\n            result.list[2].main.temp,\n            result.list[3].main.temp,\n            result.list[4].main.temp,\n          ]);\n        });\n    } else {\n      setWeatherForcast({\n        city:\"\",\n        country:\"\",\n        date_time:\"\",\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.app }>\n    \n      <div className={styles.title}>\n        <Title />\n      </div>\n      <div className={(weatherForcast.temperature > 18) ? styles.warm : styles.cold }>\n        <LocationForm className\n          handleCityChange={handleCityChange}\n          handleCountryChange={handleCountryChange}\n          getWeather={getWeather}\n        />\n        <Location className={styles.location} city={weatherForcast.city} country={weatherForcast.country}/>\n        <Date_Time date_time={weatherForcast.date_time} />\n        <Temperature temperature={weatherForcast.temperature} />\n        <Temperature\n          temp_desc=\"Max-temp\"\n          temperature={weatherForcast.temp_max}\n        />\n        <Temperature\n          temp_desc=\"Min-temp\"\n          temperature={weatherForcast.temp_min}\n        />\n        <Temperature\n          temp_desc=\"feels like\"\n          temperature={weatherForcast.feels_like}\n        />\n        <div>\n          {tempForcastNext4Days.map((temp, index) => (\n            <Temperature\n              temp_desc={<p key={index}>Next-Day:{index + 1} :</p>}\n              temperature={Math.floor(temp)  }\n            />\n          ))}\n        </div>\n\n        <Humidity\n          humidity={weatherForcast.humidity}\n          desc={weatherForcast.description}\n          error={weatherForcast.error}\n        />\n\n        {/* <p>{weatherForcast.description}</p> */}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}