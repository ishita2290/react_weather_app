{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Humidity from \"./Components/Humidity\";\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\nconst testData = [32, 31, 33, 50];\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = event => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n\n  const handleCountryChange = event => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n\n  const getWeather = e => {\n    e.preventDefault(); // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country).then(response => response.json()).then(result => {\n        console.log(result);\n        setWeatherForcast({\n          date_time: result.list[0].dt_txt,\n          temperature: result.list[0].main.temp - kelvin,\n          temp_min: result.list[0].main.temp_min - kelvin,\n          temp_max: result.list[0].main.temp_max - kelvin,\n          feels_like: result.list[0].main.feels_like - kelvin,\n          humidity: result.list[0].main.humidity,\n          description: result.list[0].weather[0].description,\n          error: \"\"\n        });\n      });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.weather_info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    handleCityChange: handleCityChange,\n    handleCountryChange: handleCountryChange,\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), testData.map((temp, index) => /*#__PURE__*/React.createElement(Temperature, {\n    temperature: /*#__PURE__*/React.createElement(\"p\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 37\n      }\n    }, \"Day:\", index + 1, \" :\", temp),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Humidity, {\n    humidity: weatherForcast.humidity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, weatherForcast.description)));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","styles","Title","LocationForm","Humidity","Temperature","getOpenWeatherMapForecast","testData","App","weatherForcast","setWeatherForcast","date_time","temperature","temp_min","temp_max","feels_like","humidity","description","error","city","setCity","country","setCountry","handleCityChange","event","target","value","handleCountryChange","getWeather","e","preventDefault","kelvin","then","response","json","result","console","log","list","dt_txt","main","temp","weather","app","title","weather_info","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Humidity from \"./Components/Humidity\";\n\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nconst testData = [32, 31, 33, 50];\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = (event) => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n  const handleCountryChange = (event) => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n\n  const getWeather = (e) => {\n    e.preventDefault();\n\n    // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country)\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(result);\n          setWeatherForcast({\n            date_time: result.list[0].dt_txt,\n            temperature: result.list[0].main.temp - kelvin,\n            temp_min: result.list[0].main.temp_min - kelvin,\n            temp_max: result.list[0].main.temp_max - kelvin,\n            feels_like: result.list[0].main.feels_like - kelvin,\n            humidity: result.list[0].main.humidity,\n            description: result.list[0].weather[0].description,\n            error: \"\",\n          });\n        });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.title}>\n        <Title />\n      </div>\n      <div className={styles.weather_info}>\n        <LocationForm\n          handleCityChange={handleCityChange}\n          handleCountryChange={handleCountryChange}\n          getWeather={getWeather}\n        />\n\n        {testData.map((temp,index) => (\n          <Temperature temperature={<p key={index}>Day:{index+1} :{temp}</p>} />\n        ))}\n\n        <Humidity humidity={weatherForcast.humidity} />\n\n        <p>{weatherForcast.description}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}