{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    date_time: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = event => {\n    // console.log(event.target.value);\n    setCity(event.target.value);\n  };\n\n  const handleCountryChange = event => {\n    // console.log(event.target.value);\n    setCountry(event.target.value);\n  };\n\n  const getWeather = e => {\n    e.preventDefault(); // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city, country).then(response => response.json()).then(result => {\n        console.log(result);\n        setWeatherForcast({\n          date_time: result.list[0].dt_txt,\n          temperature: result.list[0].main.temp - kelvin,\n          temp_min: result.list[0].main.temp_min - kelvin,\n          temp_max: result.list[0].main.temp_max - kelvin,\n          feels_like: result.list[0].main.feels_like - kelvin,\n          humidity: result.list[0].main.humidity,\n          description: result.list[0].weather[0].description,\n          error: \"\"\n        });\n      });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.weather_info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    handleCityChange: handleCityChange,\n    handleCountryChange: handleCountryChange,\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Temperature, {\n    temperature: weatherForcast.temperature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, weatherForcast.description)));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","styles","Title","LocationForm","Temperature","getOpenWeatherMapForecast","App","weatherForcast","setWeatherForcast","date_time","temperature","temp_min","temp_max","feels_like","humidity","description","error","city","setCity","country","setCountry","handleCityChange","event","target","value","handleCountryChange","getWeather","e","preventDefault","kelvin","then","response","json","result","console","log","list","dt_txt","main","temp","weather","app","title","weather_info"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport Title from \"./Components/Title\"\nimport LocationForm from \"./Components/LocationForm\";\n\nimport Temperature from \"./Components/Temperature\";\nimport { getOpenWeatherMapForecast } from \"./services/openWeatherMap\";\n\nfunction App() {\n  const [weatherForcast, setWeatherForcast] = useState({\n    date_time:\"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const handleCityChange = (event) => {\n    // console.log(event.target.value);\n    setCity(event.target.value)\n  };\n  const handleCountryChange = (event) => {\n    // console.log(event.target.value);\n    setCountry(event.target.value)\n  };\n\n  const getWeather = (e) => {\n    e.preventDefault();\n    \n    // console.log(e);\n    // const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n    \n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city,country)\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(result);\n          setWeatherForcast({\n            date_time :result.list[0].dt_txt,\n            temperature: result.list[0].main.temp - kelvin ,\n            temp_min: result.list[0].main.temp_min - kelvin,\n            temp_max: result.list[0].main.temp_max  - kelvin,\n            feels_like: result.list[0].main.feels_like - kelvin,\n            humidity: result.list[0].main.humidity,\n            description: result.list[0].weather[0].description,\n            error: \"\",\n          });\n     \n        });\n    } else {\n      setWeatherForcast({\n        temperature: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        feels_like: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter city and country\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.app}>\n      <div className ={styles.title}>\n    <Title />\n      </div>\n      <div className={styles.weather_info}>\n      <LocationForm\n        handleCityChange={handleCityChange}\n        handleCountryChange={handleCountryChange}\n        getWeather={getWeather}\n      />\n      \n      <Temperature temperature={weatherForcast.temperature}  />\n      </div>\n      <div>\n        <h2>{weatherForcast.description}</h2>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}