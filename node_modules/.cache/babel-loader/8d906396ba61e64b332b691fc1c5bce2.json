{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\nimport { getOpenWeatherMapForecast } from \"../services/openWeatherMap\";\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({\n    city: \"\",\n    country: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n\n  const getWeather = e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin = 2;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city).then(response => response.json).then(result => {\n        setWeather({\n          city: \"\",\n          country: \"\",\n          temperature: result.list[0].main.temp,\n          temp_min: \"\",\n          temp_max: \"\",\n          feels_like: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"\"\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Dates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Weather, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","getOpenWeatherMapForecast","LocationForm","Dates","App","city","setCity","weather","setWeather","country","temperature","temp_min","temp_max","feels_like","humidity","description","error","getWeather","e","preventDefault","target","elements","value","kelvin","then","response","json","result","list","main","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AAEA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC;AACrCK,IAAAA,IAAI,EAAE,EAD+B;AAErCI,IAAAA,OAAO,EAAE,EAF4B;AAGrCC,IAAAA,WAAW,EAAE,EAHwB;AAIrCC,IAAAA,QAAQ,EAAE,EAJ2B;AAKrCC,IAAAA,QAAQ,EAAE,EAL2B;AAMrCC,IAAAA,UAAU,EAAE,EANyB;AAOrCC,IAAAA,QAAQ,EAAE,EAP2B;AAQrCC,IAAAA,WAAW,EAAE,EARwB;AASrCC,IAAAA,KAAK,EAAE;AAT8B,GAAD,CAAtC;;AAWA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMd,IAAI,GAAGa,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBhB,IAAlB,CAAuBiB,KAApC;AACA,UAAMb,OAAO,GAAGS,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBZ,OAAlB,CAA0Ba,KAA1C;AACA,UAAMC,MAAM,GAAE,CAAd;;AAEA,QAAIlB,IAAI,IAAII,OAAZ,EAAqB;AACnBR,MAAAA,yBAAyB,CAACI,IAAD,CAAzB,CACGmB,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAD/B,EAEGF,IAFH,CAESG,MAAD,IAAY;AAChBnB,QAAAA,UAAU,CAAC;AACTH,UAAAA,IAAI,EAAE,EADG;AAETI,UAAAA,OAAO,EAAE,EAFA;AAGTC,UAAAA,WAAW,EAAEiB,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,IAAf,CAAoBC,IAHxB;AAITnB,UAAAA,QAAQ,EAAE,EAJD;AAKTC,UAAAA,QAAQ,EAAE,EALD;AAMTC,UAAAA,UAAU,EAAE,EANH;AAOTC,UAAAA,QAAQ,EAAE,EAPD;AAQTC,UAAAA,WAAW,EAAE,EARJ;AASTC,UAAAA,KAAK,EAAE;AATE,SAAD,CAAV;AAYD,OAfH;AAgBD;AACF,GAxBD;;AA0BA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAED,eAAeZ,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { getOpenWeatherMapForecast } from \"../services/openWeatherMap\";\n\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({\n    city: \"\",\n    country: \"\",\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const getWeather = (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin =2\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city)\n        .then((response) => response.json)\n        .then((result) => {\n          setWeather({\n            city: \"\",\n            country: \"\",\n            temperature: result.list[0].main.temp,\n            temp_min: \"\",\n            temp_max: \"\",\n            feels_like: \"\",\n            humidity: \"\",\n            description: \"\",\n            error: \"\",\n          });\n         \n        });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <LocationForm />\n      <Dates />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}