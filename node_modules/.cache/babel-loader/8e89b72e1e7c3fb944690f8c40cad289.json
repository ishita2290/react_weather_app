{"ast":null,"code":"var _jsxFileName = \"/home/ishita/weather_app_react/src/App.js\";\nimport React, { useState } from \"react\";\n;\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\n\nfunction App() {\n  const [weather, setWeather] = useState({\n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  });\n\n  const getWeather = e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city).then(response => response.json).then(result => {\n        setWeather({\n          temperature: result.list[0].main.temp - kelvin,\n          temp_min: \"\",\n          temp_max: \"\",\n          feels_like: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"\"\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LocationForm, {\n    getWeather: getWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Dates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ishita/weather_app_react/src/App.js"],"names":["React","useState","LocationForm","Dates","App","weather","setWeather","temperature","temp_min","temp_max","feels_like","humidity","description","error","getWeather","e","preventDefault","city","target","elements","value","country","kelvin","getOpenWeatherMapForecast","then","response","json","result","list","main","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA;AAEA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC;AAErCM,IAAAA,WAAW,EAAE,EAFwB;AAGrCC,IAAAA,QAAQ,EAAE,EAH2B;AAIrCC,IAAAA,QAAQ,EAAE,EAJ2B;AAKrCC,IAAAA,UAAU,EAAE,EALyB;AAMrCC,IAAAA,QAAQ,EAAE,EAN2B;AAOrCC,IAAAA,WAAW,EAAE,EAPwB;AAQrCC,IAAAA,KAAK,EAAE;AAR8B,GAAD,CAAtC;;AAUA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC;AACA,UAAMC,OAAO,GAAGN,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBE,OAAlB,CAA0BD,KAA1C;AACA,UAAME,MAAM,GAAG,GAAf;;AAEA,QAAIL,IAAI,IAAII,OAAZ,EAAqB;AACnBE,MAAAA,yBAAyB,CAACN,IAAD,CAAzB,CACGO,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAD/B,EAEGF,IAFH,CAESG,MAAD,IAAY;AAChBrB,QAAAA,UAAU,CAAC;AAETC,UAAAA,WAAW,EAAEoB,MAAM,CAACC,IAAP,CAAY,CAAZ,EAAeC,IAAf,CAAoBC,IAApB,GAA2BR,MAF/B;AAGTd,UAAAA,QAAQ,EAAE,EAHD;AAITC,UAAAA,QAAQ,EAAE,EAJD;AAKTC,UAAAA,UAAU,EAAE,EALH;AAMTC,UAAAA,QAAQ,EAAE,EAND;AAOTC,UAAAA,WAAW,EAAE,EAPJ;AAQTC,UAAAA,KAAK,EAAE;AARE,SAAD,CAAV;AAWD,OAdH;AAeD;AACF,GAvBD;;AAyBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,UAAU,EAAEC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAQD;;AAED,eAAeV,GAAf","sourcesContent":["import React, { useState } from \"react\";\n;\n\nimport \"./App.css\";\nimport LocationForm from \"./Components/LocationForm\";\nimport Dates from \"./Components/Dates\";\n\nfunction App() {\n \n  const [weather, setWeather] = useState({\n   \n    temperature: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    feels_like: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  });\n  const getWeather = (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const kelvin = 273;\n\n    if (city && country) {\n      getOpenWeatherMapForecast(city)\n        .then((response) => response.json)\n        .then((result) => {\n          setWeather({\n            \n            temperature: result.list[0].main.temp - kelvin,\n            temp_min: \"\",\n            temp_max: \"\",\n            feels_like: \"\",\n            humidity: \"\",\n            description: \"\",\n            error: \"\",\n          });\n         \n        });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <LocationForm getWeather={getWeather}/>\n      <Dates />\n     \n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}